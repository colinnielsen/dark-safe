use crate::constants;

fn chi(state: [u64; constants::NUM_LANES]) -> [u64; constants::NUM_LANES] {
  let mut new_state = state;

  // The labelling convention for the state array is `Lane(x, y) = state[5y + x]`.
  // Iterate over each plane and write updated values for each lane.
  for y in 0..constants::COLUMN_LENGTH {
    new_state[5 * y + 0] = state[5 * y + 0] ^ ((!state[5 * y + 1]) & state[5 * y + 2]);
    new_state[5 * y + 1] = state[5 * y + 1] ^ ((!state[5 * y + 2]) & state[5 * y + 3]);
    new_state[5 * y + 2] = state[5 * y + 2] ^ ((!state[5 * y + 3]) & state[5 * y + 4]);
    new_state[5 * y + 3] = state[5 * y + 3] ^ ((!state[5 * y + 4]) & state[5 * y + 0]);
    new_state[5 * y + 4] = state[5 * y + 4] ^ ((!state[5 * y + 0]) & state[5 * y + 1]);
  };

  new_state
}

#[test]
fn test_chi(){
  // Test cases taken from:
  // https://github.com/XKCP/XKCP/blob/64404beeeb261b08a1076fe2f076e4e28dd9b040/tests/TestVectors/KeccakF-1600-IntermediateValues.txt
  
  // Round 0
  let round_zero_input: [u64; constants::NUM_LANES] = [0; constants::NUM_LANES];
  constrain chi(round_zero_input) == round_zero_input;

  // Round 1
  let round_one_input = [
    0x0000000000000001, 0x0000100000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000008000,
    0x0000000000000000, 0x0000000000200000, 0x0000000000000000, 0x0000200000000000, 0x0000000000000000,
    0x0000000000000002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000200, 0x0000000000000000,
    0x0000000010000000, 0x0000000000000000, 0x0000000000000400, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000010000000000, 0x0000000000000000, 0x0000000000000004,
  ];
  let round_one_output = [
    0x0000000000000001, 0x0000100000000000, 0x0000000000008000, 0x0000000000000001, 0x0000100000008000,
    0x0000000000000000, 0x0000200000200000, 0x0000000000000000, 0x0000200000000000, 0x0000000000200000,
    0x0000000000000002, 0x0000000000000200, 0x0000000000000000, 0x0000000000000202, 0x0000000000000000,
    0x0000000010000400, 0x0000000000000000, 0x0000000000000400, 0x0000000010000000, 0x0000000000000000,
    0x0000010000000000, 0x0000000000000000, 0x0000010000000004, 0x0000000000000000, 0x0000000000000004,
  ];
  constrain chi(round_one_input) == round_one_output;

  // Round 2
  let round_two_input: [u64; constants::NUM_LANES] = [
    0x0000700000600487, 0x18C8900002300102, 0x0030300003800101, 0x2002083081800004, 0x08800C0042C14000,
    0x00041840D0000210, 0x20030210B0100002, 0x0003800003042030, 0x3191200000600200, 0x40000E20040400C0,
    0x0000260020031912, 0x001C000808018180, 0x0000830C1C000042, 0x00220030010B0100, 0xC400018210100001,
    0x01800C5808000190, 0x0608404000070000, 0x000C0040063A2400, 0x3800101001030000, 0x0C00002100004184  ,
    0x80001C0008082181, 0x06000000800020C2, 0x0085808000110018, 0xC100080000E00020, 0x00000C0040063224,
  ];
  let round_two_output = [
    0x0030500001E00486, 0x38CA983082300106, 0x08B0340041C14101, 0x2002783081A00483, 0x10488C0040D14100,
    0x00049840D3042220, 0x11932210B0700202, 0x40038E20070020F0, 0x31953040D0600010, 0x60030C30241400C2,
    0x0000A50434031950, 0x003E0038090A8080, 0xC400828E0C100043, 0x0022263021081812, 0xC41C018A18108081,
    0x01840C580E382590, 0x3E08505001060000, 0x040C0061063A6584, 0x39801C4809030010, 0x0A08402100074184,
    0x80859C8008192199, 0xC700080080E020E2, 0x008584804017321C, 0x4100180008E801A1, 0x06000C00C0063266,
  ];
  constrain chi(round_two_input) == round_two_output;
}