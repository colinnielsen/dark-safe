use crate::constants;

fn iota(state: [u64; constants::NUM_LANES], round_number: comptime Field) -> [u64; constants::NUM_LANES] {
  // Each element of RC is a bitmap for the mask to apply to the lane.
  let RC: [comptime u64; constants::NUM_ROUNDS] = [
        0x0000000000000001, 0x0000000000008082, 0x800000000000808A,
        0x8000000080008000, 0x000000000000808B, 0x0000000080000001,
        0x8000000080008081, 0x8000000000008009, 0x000000000000008A,
        0x0000000000000088, 0x0000000080008009, 0x000000008000000A,
        0x000000008000808B, 0x800000000000008B, 0x8000000000008089,
        0x8000000000008003, 0x8000000000008002, 0x8000000000000080,
        0x000000000000800A, 0x800000008000000A, 0x8000000080008081,
        0x8000000000008080, 0x0000000080000001, 0x8000000080008008
    ];

    // In order to update Lane(0,0) we must only update the first element of the state array.
    let mut new_state = state;
    new_state[0] = state[0] ^ RC[round_number];

    new_state
}

#[test]
fn test_iota(){
  // Test cases taken from:
  // https://github.com/XKCP/XKCP/blob/64404beeeb261b08a1076fe2f076e4e28dd9b040/tests/TestVectors/KeccakF-1600-IntermediateValues.txt
  
  // Round 0
  let round_zero_input: [u64; constants::NUM_LANES] = [0; constants::NUM_LANES];
  let round_zero_output = [
    0x0000000000000001,0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
    0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
    0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
    0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,
    0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000
  ];
  constrain iota(round_zero_input, 0) == round_zero_output;

  // Round 1
  let round_one_input = [
    0x0000000000000001, 0x0000100000000000, 0x0000000000008000, 0x0000000000000001, 0x0000100000008000,
    0x0000000000000000, 0x0000200000200000, 0x0000000000000000, 0x0000200000000000, 0x0000000000200000,
    0x0000000000000002, 0x0000000000000200, 0x0000000000000000, 0x0000000000000202, 0x0000000000000000,
    0x0000000010000400, 0x0000000000000000, 0x0000000000000400, 0x0000000010000000, 0x0000000000000000,
    0x0000010000000000, 0x0000000000000000, 0x0000010000000004, 0x0000000000000000, 0x0000000000000004,
  ];
  let round_one_output: [u64; constants::NUM_LANES] = [
    0x0000000000008083, 0x0000100000000000, 0x0000000000008000, 0x0000000000000001, 0x0000100000008000,
    0x0000000000000000, 0x0000200000200000, 0x0000000000000000, 0x0000200000000000, 0x0000000000200000,
    0x0000000000000002, 0x0000000000000200, 0x0000000000000000, 0x0000000000000202, 0x0000000000000000,
    0x0000000010000400, 0x0000000000000000, 0x0000000000000400, 0x0000000010000000, 0x0000000000000000,
    0x0000010000000000, 0x0000000000000000, 0x0000010000000004, 0x0000000000000000, 0x0000000000000004,
  ];
  constrain iota(round_one_input, 1) == round_one_output;

  // Round 2
  let round_two_input: [u64; constants::NUM_LANES] = [
    0x0030500001E00486, 0x38CA983082300106, 0x08B0340041C14101, 0x2002783081A00483, 0x10488C0040D14100,
    0x00049840D3042220, 0x11932210B0700202, 0x40038E20070020F0, 0x31953040D0600010, 0x60030C30241400C2,
    0x0000A50434031950, 0x003E0038090A8080, 0xC400828E0C100043, 0x0022263021081812, 0xC41C018A18108081,
    0x01840C580E382590, 0x3E08505001060000, 0x040C0061063A6584, 0x39801C4809030010, 0x0A08402100074184,
    0x80859C8008192199, 0xC700080080E020E2, 0x008584804017321C, 0x4100180008E801A1, 0x06000C00C0063266,
  ];
  let round_two_output = [
    0x8030500001E0840C, 0x38CA983082300106, 0x08B0340041C14101, 0x2002783081A00483, 0x10488C0040D14100,
    0x00049840D3042220, 0x11932210B0700202, 0x40038E20070020F0, 0x31953040D0600010, 0x60030C30241400C2,
    0x0000A50434031950, 0x003E0038090A8080, 0xC400828E0C100043, 0x0022263021081812, 0xC41C018A18108081,
    0x01840C580E382590, 0x3E08505001060000, 0x040C0061063A6584, 0x39801C4809030010, 0x0A08402100074184,
    0x80859C8008192199, 0xC700080080E020E2, 0x008584804017321C, 0x4100180008E801A1, 0x06000C00C0063266,
  ];
  constrain iota(round_two_input, 2) == round_two_output;
}